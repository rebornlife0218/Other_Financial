import pandas as pd
import matplotlib.pyplot as plt
import os

# 讀取資料
file_path = '2330_25years.feather'
data = pd.read_feather(file_path)
data['Date'] = pd.to_datetime(data['Date'])
data['Year'] = data['Date'].dt.year
data['Month'] = data['Date'].dt.month

# 讓使用者輸入要排除的年份，若不需排除則按Enter
# exclude_years_input = input("請輸入要排除的年份（以逗號分隔，若不需排除請按Enter）: ")
# if exclude_years_input.strip():  # 如果輸入非空
#     # 將輸入的年份轉換為整數列表
#     exclude_years = [int(year.strip()) for year in exclude_years_input.split(',')]
#     # 排除指定年份的資料
#     data = data[~data['Year'].isin(exclude_years)]

# 定義分析函數
def analyze_periodic_changes(year_data):
    periods = ['Early', 'Half', 'Late']
    changes = []

    for month in range(1, 13):
        month_data = year_data[year_data['Month'] == month]
        
        if not month_data.empty:
            # 將每個月的數據分成三個部分
            if len(month_data) >= 1:
                early = month_data[month_data['Date'].dt.day <= 10]
                half = month_data[(month_data['Date'].dt.day > 10) & (month_data['Date'].dt.day <= 20)]
                late = month_data[month_data['Date'].dt.day > 20]

                for period, period_data in zip(periods, [early, half, late]):
                    if not period_data.empty:
                        first_day = period_data.iloc[0]
                        last_day = period_data.iloc[-1]
                        pct_change = (last_day['Adj Close'] - first_day['Adj Close']) / first_day['Adj Close']
                        changes.append({'Year': first_day['Year'], 'Month': month, 'Period': period, 'Pct Change': pct_change})

    return changes

# 分析所有年份的資料
all_changes = []

for year, year_data in data.groupby('Year'):
    all_changes.extend(analyze_periodic_changes(year_data))

# 將結果轉成DataFrame
changes_df = pd.DataFrame(all_changes)

# 計算每個月份的每個時期的漲的次數和平均漲幅
monthly_stats = changes_df.groupby(['Month', 'Period']).agg(
    Total_Up_Count=('Pct Change', lambda x: (x > 0).sum()),
    Total_Down_Count=('Pct Change', lambda x: (x < 0).sum()),
    Avg_Up_Percent=('Pct Change', lambda x: x[x > 0].mean() * 100),
    Avg_Down_Percent=('Pct Change', lambda x: x[x < 0].mean() * 100)
).reset_index()
monthly_stats['Month_Period'] = monthly_stats.apply(lambda row: f'Month {row["Month"]} - {row["Period"]}', axis=1)
monthly_stats = monthly_stats.sort_values(by=['Month', 'Period']).reset_index(drop=True)

# 印出每月統計數據
print("Monthly Statistics:")
print(monthly_stats[['Month_Period', 'Total_Up_Count', 'Total_Down_Count', 'Avg_Up_Percent', 'Avg_Down_Percent']])

plt.figure(figsize=(12, 6))
bar_width = 0.2
x = range(len(monthly_stats))

# 繪製漲和跌的次數
plt.bar([i - bar_width for i in x], monthly_stats['Total_Up_Count'], width=bar_width, color='lightcoral', label='Number of Increases')
plt.bar(x, monthly_stats['Total_Down_Count'], width=bar_width, color='lightgreen', label='Number of Decreases')
filename = os.path.basename(file_path).replace('.feather', '')
plt.title(f'Monthly Increases and Decreases by Period {filename}')
plt.xlabel('Month and Period')
plt.ylabel('Count')

# 設置y軸刻度
y_ticks = range(0, max(monthly_stats['Total_Up_Count'].max(), monthly_stats['Total_Down_Count'].max()) + 2, 2)
plt.yticks(ticks=y_ticks)

# 更新x軸標籤
plt.xticks(ticks=x, labels=monthly_stats['Month_Period'], rotation=45, ha='right')

plt.grid(axis='y')
plt.legend()

# 顯示平均漲跌百分比
for index, row in monthly_stats.iterrows():
    # 預設位置
    up_label_y = row['Total_Up_Count'] + 0.1
    down_label_y = row['Total_Down_Count'] + 0.1
    
    # 如果漲跌次數相同，則調整上漲的百分比位置
    if row['Total_Up_Count'] == row['Total_Down_Count']:
        up_label_y += 0.4  # 向上移動

    if row['Avg_Up_Percent'] > 0:
        plt.text(index - 0.2, up_label_y, f"{row['Avg_Up_Percent']:.1f}%", color='black', ha='center', fontsize=6.5)
    if row['Avg_Down_Percent'] < 0:
        plt.text(index, down_label_y, f"{row['Avg_Down_Percent']:.1f}%", color='black', ha='center', fontsize=6.5)

plt.tight_layout()
plt.show()
